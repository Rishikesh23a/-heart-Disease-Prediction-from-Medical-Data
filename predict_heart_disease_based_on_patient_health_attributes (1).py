# -*- coding: utf-8 -*-
"""Predict heart disease based on patient health attributes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T0ZxJjViosHvTzohP4mNtsgjm_eLBtWz

Step 1: Upload Dataset to Colab
"""

# @title Default title text
from google.colab import files
uploaded = files.upload()

""" Step 2: Load Dataset"""

import pandas as pd

df = pd.read_csv("heart (2).csv")
print("Shape:", df.shape)
df.head()

"""Step 3: Clean Data"""

print(df.info())             # Check for nulls & types
print(df.isnull().sum())     # Null value count
df.dropna(inplace=True)      # Drop or impute missing values

"""Step 4: Define Target & Features"""

X = df.drop("target", axis=1)
y = df["target"]

"""Step 5: Train-Test Split"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""Step 6: Train Models

Logistic Regression
"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
pred_log = logreg.predict(X_test)
print("Logistic Regression:\n", classification_report(y_test, pred_log))

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
pred_rf = rf.predict(X_test)
print("Random Forest:\n", classification_report(y_test, pred_rf))

"""XGBoost"""

!pip install xgboost
from xgboost import XGBClassifier

xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb.fit(X_train, y_train)
pred_xgb = xgb.predict(X_test)
print("XGBoost:\n", classification_report(y_test, pred_xgb))

"""SVM"""

from sklearn.svm import SVC

svm = SVC()
svm.fit(X_train, y_train)
pred_svm = svm.predict(X_test)
print("SVM:\n", classification_report(y_test, pred_svm))

"""Step 7: Confusion Matrix"""

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, pred_rf)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix - Random Forest")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

"""Feature Importance"""

importances = rf.feature_importances_
features = X.columns
feat_df = pd.DataFrame({'Feature': features, 'Importance': importances}).sort_values(by='Importance', ascending=False)

sns.barplot(x='Importance', y='Feature', data=feat_df)
plt.title("Feature Importance - Random Forest")
plt.tight_layout()
plt.show()

"""ROC-AUC Curve"""

from sklearn.metrics import roc_curve, roc_auc_score

y_proba = rf.predict_proba(X_test)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_proba)
auc_score = roc_auc_score(y_test, y_proba)

plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {auc_score:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Random Forest')
plt.legend()
plt.show()

""" Model Accuracy Table"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Create a function to get metrics
def get_metrics(y_true, y_pred, model_name):
    return {
        'Model': model_name,
        'Accuracy': accuracy_score(y_true, y_pred),
        'Precision': precision_score(y_true, y_pred),
        'Recall': recall_score(y_true, y_pred),
        'F1-Score': f1_score(y_true, y_pred)
    }

# Collect metrics for each model
metrics = []
metrics.append(get_metrics(y_test, pred_log, 'Logistic Regression'))
metrics.append(get_metrics(y_test, pred_rf, 'Random Forest'))
metrics.append(get_metrics(y_test, pred_xgb, 'XGBoost'))
metrics.append(get_metrics(y_test, pred_svm, 'SVM'))

# Display as table
metrics_df = pd.DataFrame(metrics)
print("\nðŸ“Š Model Performance Summary:\n")
print(metrics_df)

# Optional: Plot it as a bar chart
metrics_df.set_index('Model').plot(kind='bar', figsize=(10,6))
plt.title("Model Comparison - Accuracy, Precision, Recall, F1")
plt.ylabel("Score")
plt.ylim(0, 1)
plt.grid(True)
plt.show()